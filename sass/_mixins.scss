/* Sass Mix In's
================================================== */
/* rem font sizing */
@mixin font-size($sizeValue) {
  font-size: ($sizeValue) + px;
  font-size: ($sizeValue / 10) + rem;
}

/* vendor prefixing */
@mixin css3($property, $value) {
   @each $prefix in -webkit-, -moz-, -ms-, -o-, '' {
     #{$prefix}#{$property}: $value;
   }
}

/* set opacity cross browser */
@mixin opacity($opacity) {
  $opacityIE: $opacity*100;
  filter: alpha(opacity=$opacityIE);
  opacity: $opacity;
  $opacityIE: $opacity * 100;
}

/* responsive breakpoints */
@mixin breakpoint($device) {
  @if $device == tablet {
    @media (max-width: 768px) { @content; }
  }
  @else if $device == mobile {
    @media (max-width: 640px) { @content; }
  }
}

/* Util For Rem Mixin */
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

/* Handle Rems with pixel fallback */
@mixin rem($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value*16}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  }

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  }

  #{$property}: $pxValues;
  #{$property}: $remValues;
}
