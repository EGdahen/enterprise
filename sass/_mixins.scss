// Sass Mix In's
//==================================================//

// rem font sizin
@mixin font-size($size-value) {
  font-size: ($size-value) + px;
  font-size: ($size-value / 10) + rem;
}

// Prefixes that we use throughout
$prefixes: -webkit-, -moz-, -ms-, -o-, '';

// Builds a list of vendor-prefixed animation definitions
@mixin animation($animate...) {
  $max: length($animate);
  $animations: '';

  @for $i from 1 through $max {
    $animations: #{$animations + nth($animate, $i)};

    @if $i < $max {
      $animations: #{$animations + ", "};
    }
  }

  @each $prefix in $prefixes {
    #{$prefix}animation: $animations;
  }
}

// Builds out vendor-prefixed keyframe definitions
@mixin keyframes($animation-name) {
  @-webkit-keyframes $animation-name {
    @content;
  }
  @-moz-keyframes $animation-name {
    @content;
  }
  @-ms-keyframes $animation-name {
    @content;
  }
  @-o-keyframes $animation-name {
    @content;
  }
  @keyframes $animation-name {
    @content;
  }
}

// basic vendor prefixing
@mixin css3($property, $value...) {
  @each $prefix in $prefixes {
    #{$prefix}#{$property}: $value;
  }
}

// vendor prefixes a CSS transition defintion for a CSS3 property that is also vendor-prefixed
@mixin css3-prop-transition($property, $value) {
  @each $prefix in $prefixes {
    #{$prefix}transition: #{$prefix}#{$property} $value;
  }
}

// vendor prefixed transitions for regular properties (non-vendor prefixed)
@mixin transition($transitions-list...) {
  @each $prefix in $prefixes {
    #{$prefix}transition: $transitions-list;
  }
}

// 'transform'-specific vendor prefixing mixins
// This is because we can't include the word 'transform' inside the normal vendor prefixer,
// since it would not be prefixed properly.
@mixin transform($value) {
  @each $prefix in $prefixes {
    #{$prefix}transform: $value;
  }
}

@mixin transform-origin($origin) {
  @each $prefix in $prefixes {
    #{$prefix}transform-origin: $origin;
  }
}

// rotation
@mixin rotate($deg) {
  @include transform(rotate(#{$deg}deg));
}

// scale
@mixin scale($scale) {
  @include transform(scale($scale));
}

// translate
@mixin translate($x, $y) {
  @include transform(translate($x, $y));
}

// translate3d
@mixin translate3d($x, $y, $z) {
  @include transform(translate3d($x, $y, $z));
}

// set opacity cross browser
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

// Util For Rem Mixin
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// Util To Disable Select
@mixin no-select {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

// Handle Rems with pixel fallback
@mixin rem($property, $values...) {
  $max: length($values);
  $px-values: '';
  $rem-values: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $px-values: #{$px-values + $value*16}px;

    @if $i < $max {
      $px-values: #{$px-values + " "};
    }
  }

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $rem-values: #{$rem-values + $value}rem;

    @if $i < $max {
      $rem-values: #{$rem-values + " "};
    }
  }

  #{$property}: $px-values;
  #{$property}: $rem-values;
}

// Respond-To different device sizes (Responsive Breakpoints)
@mixin respond-to($media) {
  @if $media == phone {
    @media (max-width: $breakpoint-phone-to-tablet - 1) { @content; }
  } @else if $media == tabletdown {
    @media (max-width: $breakpoint-tablet-to-desktop - 1) { @content; }
  } @else if $media == tablet {
    @media (min-width: $breakpoint-phone-to-tablet) and (max-width: $breakpoint-tablet-to-desktop - 1) { @content; }
  } @else if $media == desktop {
    @media (min-width: $breakpoint-tablet-to-desktop) and (max-width: $breakpoint-desktop-to-extralarge - 1) { @content; }
  } @else if $media == extralarge {
    @media (min-width: $breakpoint-desktop-to-extralarge) { @content; }
  }
}

// Align Vertically to Parent
@mixin vertical-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
  vertical-align: top;
}


// Truncate to Ellipsis....
@mixin ellipsis {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

@mixin focus-state {
  border: solid 1px $input-focus-border-color;
  box-shadow: 0 0 5px rgba(8, 150, 233, .2);
  outline: none;
  outline-color: transparent;
}
